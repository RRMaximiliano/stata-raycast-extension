import { Action, ActionPanel, Icon, List, showToast, Toast, showInFinder } from "@raycast/api";
import { useEffect, useState } from "react";
import { execSync } from "child_process";
import * as fs from "fs";
import * as path from "path";
import * as os from "os";
import * as plist from "plist";

export default function Command() {
  const [files, setFiles] = useState<string[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    (async () => {
      const homeDir = os.homedir();
      const originalPlistPath = path.join(homeDir, "Library/Preferences/com.stata.stata19.plist");
      const tempXmlPath = path.join(os.tmpdir(), "stata_datasets.plist.xml");

      try {
        // Convert binary plist to XML
        execSync(`plutil -convert xml1 -o "${tempXmlPath}" "${originalPlistPath}"`);
        const raw = fs.readFileSync(tempXmlPath, "utf8");
        const parsed = plist.parse(raw) as any;

        const dtaFiles: string[] = [];
        
        // Look for Recent_Files.0, Recent_Files.1, etc.
        for (let i = 0; i < 20; i++) {
          const key = `Recent_Files.${i}`;
          if (parsed[key] && typeof parsed[key] === 'string') {
            let filePath = parsed[key];
            // Remove quotes if present
            if (filePath.startsWith('"') && filePath.endsWith('"')) {
              filePath = filePath.slice(1, -1);
            }
            if (filePath.endsWith('.dta')) {
              dtaFiles.push(filePath);
            }
          }
        }

        setFiles(dtaFiles);
      } catch (error) {
        await showToast({
          style: Toast.Style.Failure,
          title: "Could not read Stata recent files",
          message: String(error),
        });
        setFiles([]);
      } finally {
        setIsLoading(false);
        if (fs.existsSync(tempXmlPath)) fs.unlinkSync(tempXmlPath); // cleanup temp file
      }
    })();
  }, []);

  async function openInStata(filePath: string) {
    try {
      // Simple approach: just open the .dta file using system file association
      // This is exactly like double-clicking the file in Finder
      execSync(`open "${filePath}"`);
      
      await showToast({
        style: Toast.Style.Success,
        title: "Opening dataset in Stata",
        message: `Opening ${path.basename(filePath)}`,
      });
    } catch (error) {
      await showToast({
        style: Toast.Style.Failure,
        title: "Failed to open dataset",
        message: String(error),
      });
    }
  }

  async function openWithDoFile(filePath: string) {
    try {
      // Create a temporary .do file that loads the dataset
      const tempDoFile = path.join(os.tmpdir(), `load_${path.basename(filePath, '.dta')}_${Date.now()}.do`);
      const doFileContent = `* Auto-generated by Raycast Stata Extension
* Loading dataset: ${path.basename(filePath)}
use "${filePath}", clear
describe
`;
      
      fs.writeFileSync(tempDoFile, doFileContent);
      
      // Open the .do file in Stata
      execSync(`open -a StataMP "${tempDoFile}"`);
      
      await showToast({
        style: Toast.Style.Success,
        title: "Created .do file",
        message: `Created script to load ${path.basename(filePath)}`,
      });
      
      // Clean up the temp file after 30 seconds
      setTimeout(() => {
        if (fs.existsSync(tempDoFile)) {
          fs.unlinkSync(tempDoFile);
        }
      }, 30000);
      
    } catch (error) {
      // Fallback for other Stata versions
      try {
        const tempDoFile = path.join(os.tmpdir(), `load_${path.basename(filePath, '.dta')}_${Date.now()}.do`);
        const doFileContent = `use "${filePath}", clear\ndescribe`;
        fs.writeFileSync(tempDoFile, doFileContent);
        
        const apps = ["StataSE", "StataIC", "Stata"];
        let opened = false;
        
        for (const app of apps) {
          try {
            execSync(`open -a ${app} "${tempDoFile}"`);
            opened = true;
            break;
          } catch {
            continue;
          }
        }
        
        if (!opened) {
          execSync(`open "${tempDoFile}"`);
        }
        
        await showToast({
          style: Toast.Style.Success,
          title: "Created .do file",
          message: `Loading ${path.basename(filePath)}`,
        });
        
        setTimeout(() => {
          if (fs.existsSync(tempDoFile)) {
            fs.unlinkSync(tempDoFile);
          }
        }, 30000);
        
      } catch (fallbackError) {
        await showToast({
          style: Toast.Style.Failure,
          title: "Failed to create .do file",
          message: String(fallbackError),
        });
      }
    }
  }

  return (
    <List isLoading={isLoading} searchBarPlaceholder="Search recent .dta files">
      <List.Section title="Recent .dta Files">
        {files.map((file, index) => (
          <List.Item
            key={index}
            title={path.basename(file)}
            subtitle={file}
            icon={Icon.Document}
            accessories={[
              {
                text: fs.existsSync(file) ? "Available" : "Missing",
                icon: fs.existsSync(file) ? Icon.Check : Icon.XMarkCircle,
              },
            ]}
            actions={
              <ActionPanel>
                <Action
                  title="Open in Stata"
                  icon={Icon.Play}
                  onAction={() => openInStata(file)}
                />
                <Action
                  title="Open with .do File"
                  icon={Icon.Code}
                  onAction={() => openWithDoFile(file)}
                />
                <Action
                  title="Show in Finder"
                  icon={Icon.Finder}
                  onAction={() => {
                    if (fs.existsSync(file)) {
                      showInFinder(file);
                    } else {
                      showToast({
                        style: Toast.Style.Failure,
                        title: "File not found",
                        message: "This file no longer exists",
                      });
                    }
                  }}
                />
                <Action.CopyToClipboard title="Copy File Path" content={file} />
                <Action.CopyToClipboard
                  title="Copy Use Command"
                  content={`use "${file}", clear`}
                  icon={Icon.Code}
                />
                <Action.OpenWith path={file} />
              </ActionPanel>
            }
          />
        ))}
      </List.Section>
      
      {files.length === 0 && !isLoading && (
        <List.EmptyView
          title="No recent datasets found"
          description="No .dta files found in recent Stata files"
          icon={Icon.Document}
        />
      )}
    </List>
  );
}
